services:
  bot_migrator:
    image: golang:1.23.2
    container_name: bot_migrator
    working_dir: /app
    volumes:
      - ./:/app
    command: make migrate_bot
    depends_on:
      bot_postgres:
        condition: service_healthy
    networks:
      - app_network

  scrapper_migrator:
    image: golang:1.23.2
    container_name: scrapper_migrator
    working_dir: /app
    volumes:
      - ./:/app
    command: make migrate_scrapper
    depends_on:
      scrapper_postgres:
        condition: service_healthy
    networks:
      - app_network

  bot_postgres:
    container_name: bot_postgres
    hostname: bot_postgres
    image: postgres:17-alpine
    environment:
      - POSTGRES_DB=bot
      - POSTGRES_USER=bot
      - POSTGRES_PASSWORD=postgres
      - PGPORT=5432
      - POSTGRES_SSL_MODE=disable
      - PGDATA=/data/postgres
    ports:
      - 5432:5432
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - app_network

  scrapper_postgres:
    container_name: scrapper_postgres
    hostname: scrapper_postgres
    image: postgres:17-alpine
    environment:
      - POSTGRES_DB=scrapper
      - POSTGRES_USER=scrapper
      - POSTGRES_PASSWORD=postgres
      - PGPORT=5433
      - POSTGRES_SSL_MODE=disable
      - PGDATA=/data/postgres
    ports:
      - "5433:5433"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - app_network

  bot:
    container_name: bot
    build:
      context: .
      dockerfile: Dockerfile.bot
    depends_on:
      bot_migrator:
        condition: service_completed_successfully
    env_file:
      - .env
    networks:
      - app_network
    ports:
      - "8081:8081"

  scrapper:
    container_name: scrapper
    build:
      context: .
      dockerfile: Dockerfile.scrapper
    depends_on:
      scrapper_migrator:
        condition: service_completed_successfully
    env_file:
      - .env
    networks:
      - app_network
    ports:
      - "8080:8080"

networks:
  app_network:
    driver: bridge
