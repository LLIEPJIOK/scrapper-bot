// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockCache is an autogenerated mock type for the Cache type
type MockCache struct {
	mock.Mock
}

type MockCache_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCache) EXPECT() *MockCache_Expecter {
	return &MockCache_Expecter{mock: &_m.Mock}
}

// GetListLinks provides a mock function with given fields: ctx, chatID, tag
func (_m *MockCache) GetListLinks(ctx context.Context, chatID int64, tag string) (string, error) {
	ret := _m.Called(ctx, chatID, tag)

	if len(ret) == 0 {
		panic("no return value specified for GetListLinks")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) (string, error)); ok {
		return rf(ctx, chatID, tag)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) string); ok {
		r0 = rf(ctx, chatID, tag)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = rf(ctx, chatID, tag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCache_GetListLinks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetListLinks'
type MockCache_GetListLinks_Call struct {
	*mock.Call
}

// GetListLinks is a helper method to define mock.On call
//   - ctx context.Context
//   - chatID int64
//   - tag string
func (_e *MockCache_Expecter) GetListLinks(ctx interface{}, chatID interface{}, tag interface{}) *MockCache_GetListLinks_Call {
	return &MockCache_GetListLinks_Call{Call: _e.mock.On("GetListLinks", ctx, chatID, tag)}
}

func (_c *MockCache_GetListLinks_Call) Run(run func(ctx context.Context, chatID int64, tag string)) *MockCache_GetListLinks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string))
	})
	return _c
}

func (_c *MockCache_GetListLinks_Call) Return(_a0 string, _a1 error) *MockCache_GetListLinks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCache_GetListLinks_Call) RunAndReturn(run func(context.Context, int64, string) (string, error)) *MockCache_GetListLinks_Call {
	_c.Call.Return(run)
	return _c
}

// InvalidateListLinks provides a mock function with given fields: ctx, chatID
func (_m *MockCache) InvalidateListLinks(ctx context.Context, chatID int64) error {
	ret := _m.Called(ctx, chatID)

	if len(ret) == 0 {
		panic("no return value specified for InvalidateListLinks")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, chatID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCache_InvalidateListLinks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InvalidateListLinks'
type MockCache_InvalidateListLinks_Call struct {
	*mock.Call
}

// InvalidateListLinks is a helper method to define mock.On call
//   - ctx context.Context
//   - chatID int64
func (_e *MockCache_Expecter) InvalidateListLinks(ctx interface{}, chatID interface{}) *MockCache_InvalidateListLinks_Call {
	return &MockCache_InvalidateListLinks_Call{Call: _e.mock.On("InvalidateListLinks", ctx, chatID)}
}

func (_c *MockCache_InvalidateListLinks_Call) Run(run func(ctx context.Context, chatID int64)) *MockCache_InvalidateListLinks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockCache_InvalidateListLinks_Call) Return(_a0 error) *MockCache_InvalidateListLinks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCache_InvalidateListLinks_Call) RunAndReturn(run func(context.Context, int64) error) *MockCache_InvalidateListLinks_Call {
	_c.Call.Return(run)
	return _c
}

// SetListLinks provides a mock function with given fields: ctx, chatID, tag, list
func (_m *MockCache) SetListLinks(ctx context.Context, chatID int64, tag string, list string) error {
	ret := _m.Called(ctx, chatID, tag, list)

	if len(ret) == 0 {
		panic("no return value specified for SetListLinks")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, string) error); ok {
		r0 = rf(ctx, chatID, tag, list)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCache_SetListLinks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetListLinks'
type MockCache_SetListLinks_Call struct {
	*mock.Call
}

// SetListLinks is a helper method to define mock.On call
//   - ctx context.Context
//   - chatID int64
//   - tag string
//   - list string
func (_e *MockCache_Expecter) SetListLinks(ctx interface{}, chatID interface{}, tag interface{}, list interface{}) *MockCache_SetListLinks_Call {
	return &MockCache_SetListLinks_Call{Call: _e.mock.On("SetListLinks", ctx, chatID, tag, list)}
}

func (_c *MockCache_SetListLinks_Call) Run(run func(ctx context.Context, chatID int64, tag string, list string)) *MockCache_SetListLinks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockCache_SetListLinks_Call) Return(_a0 error) *MockCache_SetListLinks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCache_SetListLinks_Call) RunAndReturn(run func(context.Context, int64, string, string) error) *MockCache_SetListLinks_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCache creates a new instance of MockCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCache {
	mock := &MockCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
