// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/es-debug/backend-academy-2024-go-template/internal/domain"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// DeleteChat provides a mock function with given fields: ctx, chatID
func (_m *MockRepository) DeleteChat(ctx context.Context, chatID int64) error {
	ret := _m.Called(ctx, chatID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteChat")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, chatID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_DeleteChat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteChat'
type MockRepository_DeleteChat_Call struct {
	*mock.Call
}

// DeleteChat is a helper method to define mock.On call
//   - ctx context.Context
//   - chatID int64
func (_e *MockRepository_Expecter) DeleteChat(ctx interface{}, chatID interface{}) *MockRepository_DeleteChat_Call {
	return &MockRepository_DeleteChat_Call{Call: _e.mock.On("DeleteChat", ctx, chatID)}
}

func (_c *MockRepository_DeleteChat_Call) Run(run func(ctx context.Context, chatID int64)) *MockRepository_DeleteChat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockRepository_DeleteChat_Call) Return(_a0 error) *MockRepository_DeleteChat_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_DeleteChat_Call) RunAndReturn(run func(context.Context, int64) error) *MockRepository_DeleteChat_Call {
	_c.Call.Return(run)
	return _c
}

// GetCheckLinks provides a mock function with given fields: ctx, from, to, limit
func (_m *MockRepository) GetCheckLinks(ctx context.Context, from time.Time, to time.Time, limit int) ([]*domain.CheckLink, error) {
	ret := _m.Called(ctx, from, to, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetCheckLinks")
	}

	var r0 []*domain.CheckLink
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time, int) ([]*domain.CheckLink, error)); ok {
		return rf(ctx, from, to, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time, int) []*domain.CheckLink); ok {
		r0 = rf(ctx, from, to, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.CheckLink)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time, time.Time, int) error); ok {
		r1 = rf(ctx, from, to, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetCheckLinks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCheckLinks'
type MockRepository_GetCheckLinks_Call struct {
	*mock.Call
}

// GetCheckLinks is a helper method to define mock.On call
//   - ctx context.Context
//   - from time.Time
//   - to time.Time
//   - limit int
func (_e *MockRepository_Expecter) GetCheckLinks(ctx interface{}, from interface{}, to interface{}, limit interface{}) *MockRepository_GetCheckLinks_Call {
	return &MockRepository_GetCheckLinks_Call{Call: _e.mock.On("GetCheckLinks", ctx, from, to, limit)}
}

func (_c *MockRepository_GetCheckLinks_Call) Run(run func(ctx context.Context, from time.Time, to time.Time, limit int)) *MockRepository_GetCheckLinks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Time), args[2].(time.Time), args[3].(int))
	})
	return _c
}

func (_c *MockRepository_GetCheckLinks_Call) Return(_a0 []*domain.CheckLink, _a1 error) *MockRepository_GetCheckLinks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetCheckLinks_Call) RunAndReturn(run func(context.Context, time.Time, time.Time, int) ([]*domain.CheckLink, error)) *MockRepository_GetCheckLinks_Call {
	_c.Call.Return(run)
	return _c
}

// ListLinks provides a mock function with given fields: ctx, chatID
func (_m *MockRepository) ListLinks(ctx context.Context, chatID int64) ([]*domain.Link, error) {
	ret := _m.Called(ctx, chatID)

	if len(ret) == 0 {
		panic("no return value specified for ListLinks")
	}

	var r0 []*domain.Link
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*domain.Link, error)); ok {
		return rf(ctx, chatID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*domain.Link); ok {
		r0 = rf(ctx, chatID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Link)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, chatID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_ListLinks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLinks'
type MockRepository_ListLinks_Call struct {
	*mock.Call
}

// ListLinks is a helper method to define mock.On call
//   - ctx context.Context
//   - chatID int64
func (_e *MockRepository_Expecter) ListLinks(ctx interface{}, chatID interface{}) *MockRepository_ListLinks_Call {
	return &MockRepository_ListLinks_Call{Call: _e.mock.On("ListLinks", ctx, chatID)}
}

func (_c *MockRepository_ListLinks_Call) Run(run func(ctx context.Context, chatID int64)) *MockRepository_ListLinks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockRepository_ListLinks_Call) Return(_a0 []*domain.Link, _a1 error) *MockRepository_ListLinks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_ListLinks_Call) RunAndReturn(run func(context.Context, int64) ([]*domain.Link, error)) *MockRepository_ListLinks_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterChat provides a mock function with given fields: ctx, chatID
func (_m *MockRepository) RegisterChat(ctx context.Context, chatID int64) error {
	ret := _m.Called(ctx, chatID)

	if len(ret) == 0 {
		panic("no return value specified for RegisterChat")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, chatID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_RegisterChat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterChat'
type MockRepository_RegisterChat_Call struct {
	*mock.Call
}

// RegisterChat is a helper method to define mock.On call
//   - ctx context.Context
//   - chatID int64
func (_e *MockRepository_Expecter) RegisterChat(ctx interface{}, chatID interface{}) *MockRepository_RegisterChat_Call {
	return &MockRepository_RegisterChat_Call{Call: _e.mock.On("RegisterChat", ctx, chatID)}
}

func (_c *MockRepository_RegisterChat_Call) Run(run func(ctx context.Context, chatID int64)) *MockRepository_RegisterChat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockRepository_RegisterChat_Call) Return(_a0 error) *MockRepository_RegisterChat_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_RegisterChat_Call) RunAndReturn(run func(context.Context, int64) error) *MockRepository_RegisterChat_Call {
	_c.Call.Return(run)
	return _c
}

// TrackLink provides a mock function with given fields: ctx, link
func (_m *MockRepository) TrackLink(ctx context.Context, link *domain.Link) (*domain.Link, error) {
	ret := _m.Called(ctx, link)

	if len(ret) == 0 {
		panic("no return value specified for TrackLink")
	}

	var r0 *domain.Link
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Link) (*domain.Link, error)); ok {
		return rf(ctx, link)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Link) *domain.Link); ok {
		r0 = rf(ctx, link)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Link)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.Link) error); ok {
		r1 = rf(ctx, link)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_TrackLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TrackLink'
type MockRepository_TrackLink_Call struct {
	*mock.Call
}

// TrackLink is a helper method to define mock.On call
//   - ctx context.Context
//   - link *domain.Link
func (_e *MockRepository_Expecter) TrackLink(ctx interface{}, link interface{}) *MockRepository_TrackLink_Call {
	return &MockRepository_TrackLink_Call{Call: _e.mock.On("TrackLink", ctx, link)}
}

func (_c *MockRepository_TrackLink_Call) Run(run func(ctx context.Context, link *domain.Link)) *MockRepository_TrackLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Link))
	})
	return _c
}

func (_c *MockRepository_TrackLink_Call) Return(_a0 *domain.Link, _a1 error) *MockRepository_TrackLink_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_TrackLink_Call) RunAndReturn(run func(context.Context, *domain.Link) (*domain.Link, error)) *MockRepository_TrackLink_Call {
	_c.Call.Return(run)
	return _c
}

// UntrackLink provides a mock function with given fields: ctx, chatID, url
func (_m *MockRepository) UntrackLink(ctx context.Context, chatID int64, url string) (*domain.Link, error) {
	ret := _m.Called(ctx, chatID, url)

	if len(ret) == 0 {
		panic("no return value specified for UntrackLink")
	}

	var r0 *domain.Link
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) (*domain.Link, error)); ok {
		return rf(ctx, chatID, url)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) *domain.Link); ok {
		r0 = rf(ctx, chatID, url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Link)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = rf(ctx, chatID, url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_UntrackLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UntrackLink'
type MockRepository_UntrackLink_Call struct {
	*mock.Call
}

// UntrackLink is a helper method to define mock.On call
//   - ctx context.Context
//   - chatID int64
//   - url string
func (_e *MockRepository_Expecter) UntrackLink(ctx interface{}, chatID interface{}, url interface{}) *MockRepository_UntrackLink_Call {
	return &MockRepository_UntrackLink_Call{Call: _e.mock.On("UntrackLink", ctx, chatID, url)}
}

func (_c *MockRepository_UntrackLink_Call) Run(run func(ctx context.Context, chatID int64, url string)) *MockRepository_UntrackLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string))
	})
	return _c
}

func (_c *MockRepository_UntrackLink_Call) Return(_a0 *domain.Link, _a1 error) *MockRepository_UntrackLink_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_UntrackLink_Call) RunAndReturn(run func(context.Context, int64, string) (*domain.Link, error)) *MockRepository_UntrackLink_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCheckTime provides a mock function with given fields: ctx, url, checkedAt
func (_m *MockRepository) UpdateCheckTime(ctx context.Context, url string, checkedAt time.Time) error {
	ret := _m.Called(ctx, url, checkedAt)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCheckTime")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) error); ok {
		r0 = rf(ctx, url, checkedAt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_UpdateCheckTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCheckTime'
type MockRepository_UpdateCheckTime_Call struct {
	*mock.Call
}

// UpdateCheckTime is a helper method to define mock.On call
//   - ctx context.Context
//   - url string
//   - checkedAt time.Time
func (_e *MockRepository_Expecter) UpdateCheckTime(ctx interface{}, url interface{}, checkedAt interface{}) *MockRepository_UpdateCheckTime_Call {
	return &MockRepository_UpdateCheckTime_Call{Call: _e.mock.On("UpdateCheckTime", ctx, url, checkedAt)}
}

func (_c *MockRepository_UpdateCheckTime_Call) Run(run func(ctx context.Context, url string, checkedAt time.Time)) *MockRepository_UpdateCheckTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Time))
	})
	return _c
}

func (_c *MockRepository_UpdateCheckTime_Call) Return(_a0 error) *MockRepository_UpdateCheckTime_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_UpdateCheckTime_Call) RunAndReturn(run func(context.Context, string, time.Time) error) *MockRepository_UpdateCheckTime_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
