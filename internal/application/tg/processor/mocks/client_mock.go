// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/es-debug/backend-academy-2024-go-template/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// AddLink provides a mock function with given fields: ctx, link
func (_m *MockClient) AddLink(ctx context.Context, link *domain.Link) error {
	ret := _m.Called(ctx, link)

	if len(ret) == 0 {
		panic("no return value specified for AddLink")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Link) error); ok {
		r0 = rf(ctx, link)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_AddLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddLink'
type MockClient_AddLink_Call struct {
	*mock.Call
}

// AddLink is a helper method to define mock.On call
//   - ctx context.Context
//   - link *domain.Link
func (_e *MockClient_Expecter) AddLink(ctx interface{}, link interface{}) *MockClient_AddLink_Call {
	return &MockClient_AddLink_Call{Call: _e.mock.On("AddLink", ctx, link)}
}

func (_c *MockClient_AddLink_Call) Run(run func(ctx context.Context, link *domain.Link)) *MockClient_AddLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Link))
	})
	return _c
}

func (_c *MockClient_AddLink_Call) Return(_a0 error) *MockClient_AddLink_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_AddLink_Call) RunAndReturn(run func(context.Context, *domain.Link) error) *MockClient_AddLink_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLink provides a mock function with given fields: ctx, chatID, linkURL
func (_m *MockClient) DeleteLink(ctx context.Context, chatID int64, linkURL string) error {
	ret := _m.Called(ctx, chatID, linkURL)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLink")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) error); ok {
		r0 = rf(ctx, chatID, linkURL)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_DeleteLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLink'
type MockClient_DeleteLink_Call struct {
	*mock.Call
}

// DeleteLink is a helper method to define mock.On call
//   - ctx context.Context
//   - chatID int64
//   - linkURL string
func (_e *MockClient_Expecter) DeleteLink(ctx interface{}, chatID interface{}, linkURL interface{}) *MockClient_DeleteLink_Call {
	return &MockClient_DeleteLink_Call{Call: _e.mock.On("DeleteLink", ctx, chatID, linkURL)}
}

func (_c *MockClient_DeleteLink_Call) Run(run func(ctx context.Context, chatID int64, linkURL string)) *MockClient_DeleteLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string))
	})
	return _c
}

func (_c *MockClient_DeleteLink_Call) Return(_a0 error) *MockClient_DeleteLink_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_DeleteLink_Call) RunAndReturn(run func(context.Context, int64, string) error) *MockClient_DeleteLink_Call {
	_c.Call.Return(run)
	return _c
}

// GetLinks provides a mock function with given fields: ctx, chatID, tag
func (_m *MockClient) GetLinks(ctx context.Context, chatID int64, tag string) ([]*domain.Link, error) {
	ret := _m.Called(ctx, chatID, tag)

	if len(ret) == 0 {
		panic("no return value specified for GetLinks")
	}

	var r0 []*domain.Link
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) ([]*domain.Link, error)); ok {
		return rf(ctx, chatID, tag)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) []*domain.Link); ok {
		r0 = rf(ctx, chatID, tag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Link)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = rf(ctx, chatID, tag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetLinks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLinks'
type MockClient_GetLinks_Call struct {
	*mock.Call
}

// GetLinks is a helper method to define mock.On call
//   - ctx context.Context
//   - chatID int64
//   - tag string
func (_e *MockClient_Expecter) GetLinks(ctx interface{}, chatID interface{}, tag interface{}) *MockClient_GetLinks_Call {
	return &MockClient_GetLinks_Call{Call: _e.mock.On("GetLinks", ctx, chatID, tag)}
}

func (_c *MockClient_GetLinks_Call) Run(run func(ctx context.Context, chatID int64, tag string)) *MockClient_GetLinks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string))
	})
	return _c
}

func (_c *MockClient_GetLinks_Call) Return(_a0 []*domain.Link, _a1 error) *MockClient_GetLinks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetLinks_Call) RunAndReturn(run func(context.Context, int64, string) ([]*domain.Link, error)) *MockClient_GetLinks_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterChat provides a mock function with given fields: ctx, id
func (_m *MockClient) RegisterChat(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for RegisterChat")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_RegisterChat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterChat'
type MockClient_RegisterChat_Call struct {
	*mock.Call
}

// RegisterChat is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockClient_Expecter) RegisterChat(ctx interface{}, id interface{}) *MockClient_RegisterChat_Call {
	return &MockClient_RegisterChat_Call{Call: _e.mock.On("RegisterChat", ctx, id)}
}

func (_c *MockClient_RegisterChat_Call) Run(run func(ctx context.Context, id int64)) *MockClient_RegisterChat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockClient_RegisterChat_Call) Return(_a0 error) *MockClient_RegisterChat_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_RegisterChat_Call) RunAndReturn(run func(context.Context, int64) error) *MockClient_RegisterChat_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
