// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	bot "github.com/es-debug/backend-academy-2024-go-template/internal/infrastructure/repository/bot"
	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// GetUpdates provides a mock function with no fields
func (_m *MockRepository) GetUpdates() ([]*bot.UpdateChat, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUpdates")
	}

	var r0 []*bot.UpdateChat
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*bot.UpdateChat, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*bot.UpdateChat); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*bot.UpdateChat)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetUpdates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUpdates'
type MockRepository_GetUpdates_Call struct {
	*mock.Call
}

// GetUpdates is a helper method to define mock.On call
func (_e *MockRepository_Expecter) GetUpdates() *MockRepository_GetUpdates_Call {
	return &MockRepository_GetUpdates_Call{Call: _e.mock.On("GetUpdates")}
}

func (_c *MockRepository_GetUpdates_Call) Run(run func()) *MockRepository_GetUpdates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRepository_GetUpdates_Call) Return(_a0 []*bot.UpdateChat, _a1 error) *MockRepository_GetUpdates_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetUpdates_Call) RunAndReturn(run func() ([]*bot.UpdateChat, error)) *MockRepository_GetUpdates_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
