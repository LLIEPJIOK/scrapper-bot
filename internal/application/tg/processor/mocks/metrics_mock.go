// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockMetrics is an autogenerated mock type for the Metrics type
type MockMetrics struct {
	mock.Mock
}

type MockMetrics_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMetrics) EXPECT() *MockMetrics_Expecter {
	return &MockMetrics_Expecter{mock: &_m.Mock}
}

// IncTGRequestsTotal provides a mock function with given fields: state, status
func (_m *MockMetrics) IncTGRequestsTotal(state string, status string) {
	_m.Called(state, status)
}

// MockMetrics_IncTGRequestsTotal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncTGRequestsTotal'
type MockMetrics_IncTGRequestsTotal_Call struct {
	*mock.Call
}

// IncTGRequestsTotal is a helper method to define mock.On call
//   - state string
//   - status string
func (_e *MockMetrics_Expecter) IncTGRequestsTotal(state interface{}, status interface{}) *MockMetrics_IncTGRequestsTotal_Call {
	return &MockMetrics_IncTGRequestsTotal_Call{Call: _e.mock.On("IncTGRequestsTotal", state, status)}
}

func (_c *MockMetrics_IncTGRequestsTotal_Call) Run(run func(state string, status string)) *MockMetrics_IncTGRequestsTotal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockMetrics_IncTGRequestsTotal_Call) Return() *MockMetrics_IncTGRequestsTotal_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetrics_IncTGRequestsTotal_Call) RunAndReturn(run func(string, string)) *MockMetrics_IncTGRequestsTotal_Call {
	_c.Run(run)
	return _c
}

// ObserveTGRequestsDurationSeconds provides a mock function with given fields: state, seconds
func (_m *MockMetrics) ObserveTGRequestsDurationSeconds(state string, seconds float64) {
	_m.Called(state, seconds)
}

// MockMetrics_ObserveTGRequestsDurationSeconds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObserveTGRequestsDurationSeconds'
type MockMetrics_ObserveTGRequestsDurationSeconds_Call struct {
	*mock.Call
}

// ObserveTGRequestsDurationSeconds is a helper method to define mock.On call
//   - state string
//   - seconds float64
func (_e *MockMetrics_Expecter) ObserveTGRequestsDurationSeconds(state interface{}, seconds interface{}) *MockMetrics_ObserveTGRequestsDurationSeconds_Call {
	return &MockMetrics_ObserveTGRequestsDurationSeconds_Call{Call: _e.mock.On("ObserveTGRequestsDurationSeconds", state, seconds)}
}

func (_c *MockMetrics_ObserveTGRequestsDurationSeconds_Call) Run(run func(state string, seconds float64)) *MockMetrics_ObserveTGRequestsDurationSeconds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(float64))
	})
	return _c
}

func (_c *MockMetrics_ObserveTGRequestsDurationSeconds_Call) Return() *MockMetrics_ObserveTGRequestsDurationSeconds_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetrics_ObserveTGRequestsDurationSeconds_Call) RunAndReturn(run func(string, float64)) *MockMetrics_ObserveTGRequestsDurationSeconds_Call {
	_c.Run(run)
	return _c
}

// NewMockMetrics creates a new instance of MockMetrics. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMetrics(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMetrics {
	mock := &MockMetrics{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
