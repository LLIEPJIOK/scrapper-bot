services:
  bot_migrator:
    image: golang:1.23.2
    container_name: bot_migrator
    working_dir: /app
    volumes:
      - ./:/app
    command: make migrate_bot
    depends_on:
      bot_postgres:
        condition: service_healthy
    networks:
      - app_network

  scrapper_migrator:
    image: golang:1.23.2
    container_name: scrapper_migrator
    working_dir: /app
    volumes:
      - ./:/app
    command: make migrate_scrapper
    depends_on:
      scrapper_postgres:
        condition: service_healthy
    networks:
      - app_network

  bot_postgres:
    container_name: bot_postgres
    hostname: bot_postgres
    image: postgres:17-alpine
    environment:
      - POSTGRES_DB=bot
      - POSTGRES_USER=bot
      - POSTGRES_PASSWORD=postgres
      - PGPORT=5434
      - POSTGRES_SSL_MODE=disable
      - PGDATA=/data/postgres
    ports:
      - "5434:5434"
    volumes:
      - bot_postgres_data:/data/postgres
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bot"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - app_network

  scrapper_postgres:
    container_name: scrapper_postgres
    hostname: scrapper_postgres
    image: postgres:17-alpine
    environment:
      - POSTGRES_DB=scrapper
      - POSTGRES_USER=scrapper
      - POSTGRES_PASSWORD=postgres
      - PGPORT=5433
      - POSTGRES_SSL_MODE=disable
      - PGDATA=/data/postgres
    ports:
      - "5433:5433"
    volumes:
      - scrapper_postgres_data:/data/postgres
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U scrapper"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - app_network

  bot:
    container_name: bot
    build:
      context: .
      dockerfile: Dockerfile.bot
    depends_on:
      bot_migrator:
        condition: service_completed_successfully
    env_file:
      - .env
    networks:
      - app_network
    ports:
      - "8081:8081"

  scrapper:
    container_name: scrapper
    build:
      context: .
      dockerfile: Dockerfile.scrapper
    depends_on:
      scrapper_migrator:
        condition: service_completed_successfully
    env_file:
      - .env
    networks:
      - app_network
    ports:
      - "8080:8080"

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - app_network

  kafka1:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka1
    depends_on:
      zookeeper:
        condition: service_started
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - app_network

  kafka2:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka2
    depends_on:
      zookeeper:
        condition: service_started
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - app_network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8082:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka1:9092,kafka2:9092
    depends_on:
      kafka1:
        condition: service_started
      kafka2:
        condition: service_started
    networks:
      - app_network

networks:
  app_network:
    driver: bridge

volumes:
  bot_postgres_data:
  scrapper_postgres_data:
