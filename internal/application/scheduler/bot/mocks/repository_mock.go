// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/es-debug/backend-academy-2024-go-template/internal/domain"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// GetUpdates provides a mock function with given fields: ctx, chatID, from, to
func (_m *MockRepository) GetUpdates(ctx context.Context, chatID int64, from time.Time, to time.Time) ([]domain.Update, error) {
	ret := _m.Called(ctx, chatID, from, to)

	if len(ret) == 0 {
		panic("no return value specified for GetUpdates")
	}

	var r0 []domain.Update
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, time.Time, time.Time) ([]domain.Update, error)); ok {
		return rf(ctx, chatID, from, to)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, time.Time, time.Time) []domain.Update); ok {
		r0 = rf(ctx, chatID, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Update)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, time.Time, time.Time) error); ok {
		r1 = rf(ctx, chatID, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetUpdates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUpdates'
type MockRepository_GetUpdates_Call struct {
	*mock.Call
}

// GetUpdates is a helper method to define mock.On call
//   - ctx context.Context
//   - chatID int64
//   - from time.Time
//   - to time.Time
func (_e *MockRepository_Expecter) GetUpdates(ctx interface{}, chatID interface{}, from interface{}, to interface{}) *MockRepository_GetUpdates_Call {
	return &MockRepository_GetUpdates_Call{Call: _e.mock.On("GetUpdates", ctx, chatID, from, to)}
}

func (_c *MockRepository_GetUpdates_Call) Run(run func(ctx context.Context, chatID int64, from time.Time, to time.Time)) *MockRepository_GetUpdates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(time.Time), args[3].(time.Time))
	})
	return _c
}

func (_c *MockRepository_GetUpdates_Call) Return(_a0 []domain.Update, _a1 error) *MockRepository_GetUpdates_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetUpdates_Call) RunAndReturn(run func(context.Context, int64, time.Time, time.Time) ([]domain.Update, error)) *MockRepository_GetUpdates_Call {
	_c.Call.Return(run)
	return _c
}

// GetUpdatesChats provides a mock function with given fields: ctx, from, to
func (_m *MockRepository) GetUpdatesChats(ctx context.Context, from time.Time, to time.Time) ([]int64, error) {
	ret := _m.Called(ctx, from, to)

	if len(ret) == 0 {
		panic("no return value specified for GetUpdatesChats")
	}

	var r0 []int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) ([]int64, error)); ok {
		return rf(ctx, from, to)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) []int64); ok {
		r0 = rf(ctx, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time, time.Time) error); ok {
		r1 = rf(ctx, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetUpdatesChats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUpdatesChats'
type MockRepository_GetUpdatesChats_Call struct {
	*mock.Call
}

// GetUpdatesChats is a helper method to define mock.On call
//   - ctx context.Context
//   - from time.Time
//   - to time.Time
func (_e *MockRepository_Expecter) GetUpdatesChats(ctx interface{}, from interface{}, to interface{}) *MockRepository_GetUpdatesChats_Call {
	return &MockRepository_GetUpdatesChats_Call{Call: _e.mock.On("GetUpdatesChats", ctx, from, to)}
}

func (_c *MockRepository_GetUpdatesChats_Call) Run(run func(ctx context.Context, from time.Time, to time.Time)) *MockRepository_GetUpdatesChats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Time), args[2].(time.Time))
	})
	return _c
}

func (_c *MockRepository_GetUpdatesChats_Call) Return(_a0 []int64, _a1 error) *MockRepository_GetUpdatesChats_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetUpdatesChats_Call) RunAndReturn(run func(context.Context, time.Time, time.Time) ([]int64, error)) *MockRepository_GetUpdatesChats_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
