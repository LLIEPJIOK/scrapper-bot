// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockMetrics is an autogenerated mock type for the Metrics type
type MockMetrics struct {
	mock.Mock
}

type MockMetrics_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMetrics) EXPECT() *MockMetrics_Expecter {
	return &MockMetrics_Expecter{mock: &_m.Mock}
}

// DecActiveLinksTotal provides a mock function with given fields: linkType
func (_m *MockMetrics) DecActiveLinksTotal(linkType string) {
	_m.Called(linkType)
}

// MockMetrics_DecActiveLinksTotal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DecActiveLinksTotal'
type MockMetrics_DecActiveLinksTotal_Call struct {
	*mock.Call
}

// DecActiveLinksTotal is a helper method to define mock.On call
//   - linkType string
func (_e *MockMetrics_Expecter) DecActiveLinksTotal(linkType interface{}) *MockMetrics_DecActiveLinksTotal_Call {
	return &MockMetrics_DecActiveLinksTotal_Call{Call: _e.mock.On("DecActiveLinksTotal", linkType)}
}

func (_c *MockMetrics_DecActiveLinksTotal_Call) Run(run func(linkType string)) *MockMetrics_DecActiveLinksTotal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockMetrics_DecActiveLinksTotal_Call) Return() *MockMetrics_DecActiveLinksTotal_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetrics_DecActiveLinksTotal_Call) RunAndReturn(run func(string)) *MockMetrics_DecActiveLinksTotal_Call {
	_c.Run(run)
	return _c
}

// IncActiveLinksTotal provides a mock function with given fields: linkType
func (_m *MockMetrics) IncActiveLinksTotal(linkType string) {
	_m.Called(linkType)
}

// MockMetrics_IncActiveLinksTotal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncActiveLinksTotal'
type MockMetrics_IncActiveLinksTotal_Call struct {
	*mock.Call
}

// IncActiveLinksTotal is a helper method to define mock.On call
//   - linkType string
func (_e *MockMetrics_Expecter) IncActiveLinksTotal(linkType interface{}) *MockMetrics_IncActiveLinksTotal_Call {
	return &MockMetrics_IncActiveLinksTotal_Call{Call: _e.mock.On("IncActiveLinksTotal", linkType)}
}

func (_c *MockMetrics_IncActiveLinksTotal_Call) Run(run func(linkType string)) *MockMetrics_IncActiveLinksTotal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockMetrics_IncActiveLinksTotal_Call) Return() *MockMetrics_IncActiveLinksTotal_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetrics_IncActiveLinksTotal_Call) RunAndReturn(run func(string)) *MockMetrics_IncActiveLinksTotal_Call {
	_c.Run(run)
	return _c
}

// SetActiveLinksTotal provides a mock function with given fields: linkType, count
func (_m *MockMetrics) SetActiveLinksTotal(linkType string, count int) {
	_m.Called(linkType, count)
}

// MockMetrics_SetActiveLinksTotal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetActiveLinksTotal'
type MockMetrics_SetActiveLinksTotal_Call struct {
	*mock.Call
}

// SetActiveLinksTotal is a helper method to define mock.On call
//   - linkType string
//   - count int
func (_e *MockMetrics_Expecter) SetActiveLinksTotal(linkType interface{}, count interface{}) *MockMetrics_SetActiveLinksTotal_Call {
	return &MockMetrics_SetActiveLinksTotal_Call{Call: _e.mock.On("SetActiveLinksTotal", linkType, count)}
}

func (_c *MockMetrics_SetActiveLinksTotal_Call) Run(run func(linkType string, count int)) *MockMetrics_SetActiveLinksTotal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int))
	})
	return _c
}

func (_c *MockMetrics_SetActiveLinksTotal_Call) Return() *MockMetrics_SetActiveLinksTotal_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetrics_SetActiveLinksTotal_Call) RunAndReturn(run func(string, int)) *MockMetrics_SetActiveLinksTotal_Call {
	_c.Run(run)
	return _c
}

// NewMockMetrics creates a new instance of MockMetrics. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMetrics(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMetrics {
	mock := &MockMetrics{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
