// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	scrapper "github.com/es-debug/backend-academy-2024-go-template/pkg/api/http/v1/scrapper"
	mock "github.com/stretchr/testify/mock"
)

// MockExternalClient is an autogenerated mock type for the ExternalClient type
type MockExternalClient struct {
	mock.Mock
}

type MockExternalClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExternalClient) EXPECT() *MockExternalClient_Expecter {
	return &MockExternalClient_Expecter{mock: &_m.Mock}
}

// LinksDelete provides a mock function with given fields: ctx, request, params
func (_m *MockExternalClient) LinksDelete(ctx context.Context, request *scrapper.RemoveLinkRequest, params scrapper.LinksDeleteParams) (scrapper.LinksDeleteRes, error) {
	ret := _m.Called(ctx, request, params)

	if len(ret) == 0 {
		panic("no return value specified for LinksDelete")
	}

	var r0 scrapper.LinksDeleteRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *scrapper.RemoveLinkRequest, scrapper.LinksDeleteParams) (scrapper.LinksDeleteRes, error)); ok {
		return rf(ctx, request, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *scrapper.RemoveLinkRequest, scrapper.LinksDeleteParams) scrapper.LinksDeleteRes); ok {
		r0 = rf(ctx, request, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(scrapper.LinksDeleteRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *scrapper.RemoveLinkRequest, scrapper.LinksDeleteParams) error); ok {
		r1 = rf(ctx, request, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExternalClient_LinksDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LinksDelete'
type MockExternalClient_LinksDelete_Call struct {
	*mock.Call
}

// LinksDelete is a helper method to define mock.On call
//   - ctx context.Context
//   - request *scrapper.RemoveLinkRequest
//   - params scrapper.LinksDeleteParams
func (_e *MockExternalClient_Expecter) LinksDelete(ctx interface{}, request interface{}, params interface{}) *MockExternalClient_LinksDelete_Call {
	return &MockExternalClient_LinksDelete_Call{Call: _e.mock.On("LinksDelete", ctx, request, params)}
}

func (_c *MockExternalClient_LinksDelete_Call) Run(run func(ctx context.Context, request *scrapper.RemoveLinkRequest, params scrapper.LinksDeleteParams)) *MockExternalClient_LinksDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*scrapper.RemoveLinkRequest), args[2].(scrapper.LinksDeleteParams))
	})
	return _c
}

func (_c *MockExternalClient_LinksDelete_Call) Return(_a0 scrapper.LinksDeleteRes, _a1 error) *MockExternalClient_LinksDelete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExternalClient_LinksDelete_Call) RunAndReturn(run func(context.Context, *scrapper.RemoveLinkRequest, scrapper.LinksDeleteParams) (scrapper.LinksDeleteRes, error)) *MockExternalClient_LinksDelete_Call {
	_c.Call.Return(run)
	return _c
}

// LinksGet provides a mock function with given fields: ctx, params
func (_m *MockExternalClient) LinksGet(ctx context.Context, params scrapper.LinksGetParams) (scrapper.LinksGetRes, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for LinksGet")
	}

	var r0 scrapper.LinksGetRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, scrapper.LinksGetParams) (scrapper.LinksGetRes, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, scrapper.LinksGetParams) scrapper.LinksGetRes); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(scrapper.LinksGetRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, scrapper.LinksGetParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExternalClient_LinksGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LinksGet'
type MockExternalClient_LinksGet_Call struct {
	*mock.Call
}

// LinksGet is a helper method to define mock.On call
//   - ctx context.Context
//   - params scrapper.LinksGetParams
func (_e *MockExternalClient_Expecter) LinksGet(ctx interface{}, params interface{}) *MockExternalClient_LinksGet_Call {
	return &MockExternalClient_LinksGet_Call{Call: _e.mock.On("LinksGet", ctx, params)}
}

func (_c *MockExternalClient_LinksGet_Call) Run(run func(ctx context.Context, params scrapper.LinksGetParams)) *MockExternalClient_LinksGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(scrapper.LinksGetParams))
	})
	return _c
}

func (_c *MockExternalClient_LinksGet_Call) Return(_a0 scrapper.LinksGetRes, _a1 error) *MockExternalClient_LinksGet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExternalClient_LinksGet_Call) RunAndReturn(run func(context.Context, scrapper.LinksGetParams) (scrapper.LinksGetRes, error)) *MockExternalClient_LinksGet_Call {
	_c.Call.Return(run)
	return _c
}

// LinksPost provides a mock function with given fields: ctx, request, params
func (_m *MockExternalClient) LinksPost(ctx context.Context, request *scrapper.AddLinkRequest, params scrapper.LinksPostParams) (scrapper.LinksPostRes, error) {
	ret := _m.Called(ctx, request, params)

	if len(ret) == 0 {
		panic("no return value specified for LinksPost")
	}

	var r0 scrapper.LinksPostRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *scrapper.AddLinkRequest, scrapper.LinksPostParams) (scrapper.LinksPostRes, error)); ok {
		return rf(ctx, request, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *scrapper.AddLinkRequest, scrapper.LinksPostParams) scrapper.LinksPostRes); ok {
		r0 = rf(ctx, request, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(scrapper.LinksPostRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *scrapper.AddLinkRequest, scrapper.LinksPostParams) error); ok {
		r1 = rf(ctx, request, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExternalClient_LinksPost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LinksPost'
type MockExternalClient_LinksPost_Call struct {
	*mock.Call
}

// LinksPost is a helper method to define mock.On call
//   - ctx context.Context
//   - request *scrapper.AddLinkRequest
//   - params scrapper.LinksPostParams
func (_e *MockExternalClient_Expecter) LinksPost(ctx interface{}, request interface{}, params interface{}) *MockExternalClient_LinksPost_Call {
	return &MockExternalClient_LinksPost_Call{Call: _e.mock.On("LinksPost", ctx, request, params)}
}

func (_c *MockExternalClient_LinksPost_Call) Run(run func(ctx context.Context, request *scrapper.AddLinkRequest, params scrapper.LinksPostParams)) *MockExternalClient_LinksPost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*scrapper.AddLinkRequest), args[2].(scrapper.LinksPostParams))
	})
	return _c
}

func (_c *MockExternalClient_LinksPost_Call) Return(_a0 scrapper.LinksPostRes, _a1 error) *MockExternalClient_LinksPost_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExternalClient_LinksPost_Call) RunAndReturn(run func(context.Context, *scrapper.AddLinkRequest, scrapper.LinksPostParams) (scrapper.LinksPostRes, error)) *MockExternalClient_LinksPost_Call {
	_c.Call.Return(run)
	return _c
}

// TgChatIDDelete provides a mock function with given fields: ctx, params
func (_m *MockExternalClient) TgChatIDDelete(ctx context.Context, params scrapper.TgChatIDDeleteParams) (scrapper.TgChatIDDeleteRes, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for TgChatIDDelete")
	}

	var r0 scrapper.TgChatIDDeleteRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, scrapper.TgChatIDDeleteParams) (scrapper.TgChatIDDeleteRes, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, scrapper.TgChatIDDeleteParams) scrapper.TgChatIDDeleteRes); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(scrapper.TgChatIDDeleteRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, scrapper.TgChatIDDeleteParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExternalClient_TgChatIDDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TgChatIDDelete'
type MockExternalClient_TgChatIDDelete_Call struct {
	*mock.Call
}

// TgChatIDDelete is a helper method to define mock.On call
//   - ctx context.Context
//   - params scrapper.TgChatIDDeleteParams
func (_e *MockExternalClient_Expecter) TgChatIDDelete(ctx interface{}, params interface{}) *MockExternalClient_TgChatIDDelete_Call {
	return &MockExternalClient_TgChatIDDelete_Call{Call: _e.mock.On("TgChatIDDelete", ctx, params)}
}

func (_c *MockExternalClient_TgChatIDDelete_Call) Run(run func(ctx context.Context, params scrapper.TgChatIDDeleteParams)) *MockExternalClient_TgChatIDDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(scrapper.TgChatIDDeleteParams))
	})
	return _c
}

func (_c *MockExternalClient_TgChatIDDelete_Call) Return(_a0 scrapper.TgChatIDDeleteRes, _a1 error) *MockExternalClient_TgChatIDDelete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExternalClient_TgChatIDDelete_Call) RunAndReturn(run func(context.Context, scrapper.TgChatIDDeleteParams) (scrapper.TgChatIDDeleteRes, error)) *MockExternalClient_TgChatIDDelete_Call {
	_c.Call.Return(run)
	return _c
}

// TgChatIDPost provides a mock function with given fields: ctx, params
func (_m *MockExternalClient) TgChatIDPost(ctx context.Context, params scrapper.TgChatIDPostParams) (scrapper.TgChatIDPostRes, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for TgChatIDPost")
	}

	var r0 scrapper.TgChatIDPostRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, scrapper.TgChatIDPostParams) (scrapper.TgChatIDPostRes, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, scrapper.TgChatIDPostParams) scrapper.TgChatIDPostRes); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(scrapper.TgChatIDPostRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, scrapper.TgChatIDPostParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExternalClient_TgChatIDPost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TgChatIDPost'
type MockExternalClient_TgChatIDPost_Call struct {
	*mock.Call
}

// TgChatIDPost is a helper method to define mock.On call
//   - ctx context.Context
//   - params scrapper.TgChatIDPostParams
func (_e *MockExternalClient_Expecter) TgChatIDPost(ctx interface{}, params interface{}) *MockExternalClient_TgChatIDPost_Call {
	return &MockExternalClient_TgChatIDPost_Call{Call: _e.mock.On("TgChatIDPost", ctx, params)}
}

func (_c *MockExternalClient_TgChatIDPost_Call) Run(run func(ctx context.Context, params scrapper.TgChatIDPostParams)) *MockExternalClient_TgChatIDPost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(scrapper.TgChatIDPostParams))
	})
	return _c
}

func (_c *MockExternalClient_TgChatIDPost_Call) Return(_a0 scrapper.TgChatIDPostRes, _a1 error) *MockExternalClient_TgChatIDPost_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExternalClient_TgChatIDPost_Call) RunAndReturn(run func(context.Context, scrapper.TgChatIDPostParams) (scrapper.TgChatIDPostRes, error)) *MockExternalClient_TgChatIDPost_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExternalClient creates a new instance of MockExternalClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExternalClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExternalClient {
	mock := &MockExternalClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
