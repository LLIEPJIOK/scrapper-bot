package processor

import (
	"context"
	"fmt"

	"github.com/es-debug/backend-academy-2024-go-template/pkg/fsm"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

const staterAnswer = `*–ü—Ä–∏–≤–µ—Ç! –Ø LinkTracker ‚Äì —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–∞ —Å–∞–π—Ç–∞—Ö.*  

üîπ –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ —Å—Å—ã–ª–∫–∏ –∏ –ø–æ–ª—É—á–∞–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö.  
üîπ –£–ø—Ä–∞–≤–ª—è–π –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –ø—Ä—è–º–æ –≤ Telegram.  
üîπ –ü–æ–ª—É—á–∞–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ä–∞–∑—É –∏–ª–∏ –≤ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è.  

üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:  
- /track ‚Äì –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
- /untrack ‚Äì –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
- /list ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏
- /help ‚Äì —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º

–ù–∞—á–Ω–∏ —Å /track –∏ –±—É–¥—å –≤ –∫—É—Ä—Å–µ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π! üöÄ
`

type Stater struct {
	client   Client
	channels Channels
}

func NewStater(client Client, channels Channels) *Stater {
	return &Stater{
		client:   client,
		channels: channels,
	}
}

func (h *Stater) Handle(ctx context.Context, state *State) *fsm.Result[*State] {
	if err := h.client.RegisterChat(ctx, state.ChatID); err != nil {
		state.ShowError = "–æ—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–∞—Ç–∞"

		return &fsm.Result[*State]{
			NextState:        fail,
			IsAutoTransition: true,
			Result:           state,
			Error:            fmt.Errorf("h.client.RegisterChat(ctx, %d): %w", state.ChatID, err),
		}
	}

	msg := tgbotapi.NewMessage(state.ChatID, staterAnswer)
	msg.ParseMode = tgbotapi.ModeMarkdown
	h.channels.TelegramResp() <- msg

	return &fsm.Result[*State]{
		IsAutoTransition: false,
		Result:           state,
	}
}
